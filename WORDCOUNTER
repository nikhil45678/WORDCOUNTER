import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

public class WordCounter {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Please enter the text or provide a file path to count the words:");
        String input = scanner.nextLine();
        scanner.close();

        String[] words;
        if (input.startsWith("file:")) {
            String filePath = input.substring(5).trim();
            words = readWordsFromFile(filePath);
        } else {
            words = input.split("[\\p{Punct}\\s]+");
        }

        int totalWordCount = words.length;
        int uniqueWordCount = countUniqueWords(words);
        Map<String, Integer> wordFrequency = getWordFrequency(words);

        System.out.println("Total Word Count: " + totalWordCount);
        System.out.println("Unique Word Count: " + uniqueWordCount);
        System.out.println("Word Frequency:");
        for (Map.Entry<String, Integer> entry : wordFrequency.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }
    }

    private static String[] readWordsFromFile(String filePath) {
        try {
            File file = new File(filePath);
            Scanner fileScanner = new Scanner(file);
            StringBuilder contentBuilder = new StringBuilder();
            while (fileScanner.hasNextLine()) {
                contentBuilder.append(fileScanner.nextLine()).append(" ");
            }
            fileScanner.close();
            return contentBuilder.toString().split("[\\p{Punct}\\s]+");
        } catch (FileNotFoundException e) {
            System.err.println("File not found: " + filePath);
            System.exit(1);
            return new String[0]; 
        }
    }

    private static int countUniqueWords(String[] words) {
        Set<String> uniqueWords = new HashSet<>(Arrays.asList(words));
        return uniqueWords.size();
    }

    private static Map<String, Integer> getWordFrequency(String[] words) {
        Map<String, Integer> wordFrequency = new HashMap<>();
        for (String word : words) {
            wordFrequency.put(word, wordFrequency.getOrDefault(word, 0) + 1);
        }
        return wordFrequency;
    }
}
